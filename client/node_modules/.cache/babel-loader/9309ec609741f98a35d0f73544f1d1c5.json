{"ast":null,"code":"import _regeneratorRuntime from\"/Users/gopal/blockchain/MultiSig Wallet/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/gopal/blockchain/MultiSig Wallet/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import Web3 from'web3';import Wallet from'./contracts/Wallet.json';import detectEthereumProvider from'@metamask/detect-provider';var getWeb3=function getWeb3(){return new Promise(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve,reject){var provider,web3;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return detectEthereumProvider();case 2:provider=_context.sent;if(!provider){_context.next=7;break;}_context.next=6;return provider.request({method:'eth_requestAccounts'});case 6:try{web3=new Web3(window.ethereum);resolve(web3);}catch(error){reject(error);}case 7:reject('Install Metamask');case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());};var getWallet=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3){var networkId,deployedNetwork;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return web3.eth.net.getId();case 2:networkId=_context2.sent;deployedNetwork=Wallet.networks[networkId];return _context2.abrupt(\"return\",new web3.eth.Contract(Wallet.abi,deployedNetwork&&deployedNetwork.address));case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function getWallet(_x3){return _ref2.apply(this,arguments);};}();export{getWeb3,getWallet};","map":{"version":3,"sources":["/Users/gopal/blockchain/MultiSig Wallet/client/src/utils.js"],"names":["Web3","Wallet","detectEthereumProvider","getWeb3","Promise","resolve","reject","provider","request","method","web3","window","ethereum","error","getWallet","eth","net","getId","networkId","deployedNetwork","networks","Contract","abi","address"],"mappings":"uUAAA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,yBAAnB,CACA,MAAOC,CAAAA,sBAAP,KAAmC,2BAAnC,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,SACZ,IAAIC,CAAAA,OAAJ,0FAAY,iBAAOC,OAAP,CAAgBC,MAAhB,0JACaJ,CAAAA,sBAAsB,EADnC,QACJK,QADI,mBAEJA,QAFI,+CAGEA,CAAAA,QAAQ,CAACC,OAAT,CAAiB,CAAEC,MAAM,CAAE,qBAAV,CAAjB,CAHF,QAIJ,GAAI,CACMC,IADN,CACa,GAAIV,CAAAA,IAAJ,CAASW,MAAM,CAACC,QAAhB,CADb,CAEAP,OAAO,CAACK,IAAD,CAAP,CACH,CAAC,MAAOG,KAAP,CAAc,CACZP,MAAM,CAACO,KAAD,CAAN,CACH,CATG,OAWNP,MAAM,CAAC,kBAAD,CAAN,CAXM,sDAAZ,mEADY,EAAhB,CAkBA,GAAMQ,CAAAA,SAAS,2FAAG,kBAAMJ,IAAN,2KACUA,CAAAA,IAAI,CAACK,GAAL,CAASC,GAAT,CAAaC,KAAb,EADV,QACRC,SADQ,gBAERC,eAFQ,CAEUlB,MAAM,CAACmB,QAAP,CAAgBF,SAAhB,CAFV,kCAGP,GAAIR,CAAAA,IAAI,CAACK,GAAL,CAASM,QAAb,CACHpB,MAAM,CAACqB,GADJ,CAEHH,eAAe,EAAIA,eAAe,CAACI,OAFhC,CAHO,0DAAH,kBAATT,CAAAA,SAAS,8CAAf,CASA,OAASX,OAAT,CAAkBW,SAAlB","sourcesContent":["import Web3 from 'web3';\nimport Wallet from './contracts/Wallet.json';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nconst getWeb3 = () =>\n    new Promise(async (resolve, reject) => {\n        let provider = await detectEthereumProvider();\n        if (provider) {\n            await provider.request({ method: 'eth_requestAccounts' });\n            try {\n                const web3 = new Web3(window.ethereum);\n                resolve(web3);\n            } catch (error) {\n                reject(error);\n            }\n\n        } reject('Install Metamask');\n\n    });\n\n\n\nconst getWallet = async web3 => {\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Wallet.networks[networkId];\n    return new web3.eth.Contract(\n        Wallet.abi,\n        deployedNetwork && deployedNetwork.address\n    );\n};\n\nexport { getWeb3, getWallet };"]},"metadata":{},"sourceType":"module"}